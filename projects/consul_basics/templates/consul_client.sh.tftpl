#!/bin/sh

## Get instance IP from cloud-init (replace with VM IP when appropriate)
INSTANCE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)

## Install keys, repos and packages
wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor > /etc/apt/trusted.gpg.d/hashicorp.gpg
chmod go-w /etc/apt/trusted.gpg.d/hashicorp.gpg
chmod ugo+r /etc/apt/trusted.gpg.d/hashicorp.gpg
apt-add-repository -y "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
apt update && apt install -y unzip consul consul-template haproxy jq net-tools


# Install fake-service
mkdir -p /opt/fake-service
wget https://github.com/nicholasjackson/fake-service/releases/download/v0.26.0/fake_service_linux_amd64.zip
unzip -od /opt/fake-service/ fake_service_linux_amd64.zip
rm -f fake_service_linux_amd64.zip
chmod +x /opt/fake-service/fake-service

# Configure a service on the VM
cat <<EOT > /etc/systemd/system/mysql.service
[Unit]
Description=mysql
After=syslog.target network.target

[Service]
Environment=NAME="mysql - ${db_type}"
Environment=MESSAGE="Product DB MySQL"
Environment=LISTEN_ADDR="0.0.0.0:3306"
ExecStart=/opt/fake-service/fake-service
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT

cat <<EOT > /etc/consul.d/mysql.hcl
service {
  name = "mysql"
  port = 3306
  tags = ["mysql", "sql", "product", "db", "${db_type}"]
  meta = {
    product = "MySQL"
    version = "8.0.34"
    owner   = "dba@acme.com"
  } 

  checks = [
    {
      name = "SQL Server Check on port 3306"
      tcp = "127.0.0.1:3306"
      interval = "10s"
      timeout = "5s"
    }
  ]
  token = "${consul_token}"
}
EOT

# Configure a "redis" service on the VM
cat <<EOT > /etc/systemd/system/redis.service
[Unit]
Description=redis
After=syslog.target network.target

[Service]
Environment=NAME="Redis"
Environment=MESSAGE="Redis Service"
Environment=LISTEN_ADDR="0.0.0.0:6379"
ExecStart=/opt/fake-service/fake-service
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT

cat <<EOT > /etc/consul.d/redis.hcl
service {
  name = "redis"
  port = 6379
  tags = ["redis", "prod"]
  meta = {
    product = "Redis"
    version = "8.5"
    owner   = "nosql@acme.com"
  } 

  checks = [
    {
      name = "Redis check on port 6379"
      http = "http://127.0.0.1:6379/health"
      interval = "10s"
      timeout = "5s"
    }
  ]
  token = "${consul_token}"
}
EOT


# Configure a "middleware" service on the VM
cat <<EOT > /etc/systemd/system/middleware.service
[Unit]
Description=middleware
After=syslog.target network.target

[Service]
Environment=NAME="Middleware on $${INSTANCE_IP}"
Environment=MESSAGE="Middleware Service"
Environment=LISTEN_ADDR="0.0.0.0:8090"
Environment=UPSTREAM_URIS="http://read-write.mysql.service.consul:3306,http://read-only.mysql.service.consul:3306,http://redis.service.consul:6379"
ExecStart=/opt/fake-service/fake-service
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT



cat <<EOT > /etc/consul.d/middleware.hcl
service {
  name = "middleware"
  port = 8090
  tags = ["middleware", "stateless"]
  meta = {
    product = "Middleware"
    version = "2.5.3"
    owner   = "middleware-team@acme.com"
  } 

  checks = [
    {
      name = "Middleware check on port 8090"
      http = "http://127.0.0.1:8090/health"
      interval = "10s"
      timeout = "5s"
    }
  ]
  token = "${consul_token}"
}
EOT

# Configure a "frontend" service on the VM
cat <<EOT > /etc/systemd/system/frontend.service
[Unit]
Description=frontend
After=syslog.target network.target

[Service]
Environment=NAME="Frontend on $${INSTANCE_IP}"
Environment=MESSAGE="Frontend Service"
Environment=LISTEN_ADDR="0.0.0.0:8080"
Environment=UPSTREAM_URIS="http://middleware.service.consul:8090"
ExecStart=/opt/fake-service/fake-service
ExecStop=/bin/sleep 5
Restart=always

[Install]
WantedBy=multi-user.target
EOT


cat <<EOT > /etc/consul.d/frontend.hcl
service {
  name = "frontend"
  port = 8080
  tags = ["frontend", "stateless"]
  meta = {
    product = "Frontend"
    version = "4.8.1"
    owner   = "frontend-team@acme.com"
  } 

  checks = [
    {
      name = "Frontend check on port 8080"
      http = "http://127.0.0.1:8080/health"
      interval = "10s"
      timeout = "5s"
    }
  ]
  token = "${consul_token}"
}
EOT

cat <<EOT > /etc/consul.d/haproxy.hcl
service {
  name = "haproxy"
  port = 80
  tags = ["slb"]
  meta = {
    product = "haproxy"
    version = "2.4.22"
  } 

  checks = [
    {
      name = "Check on port 80"
      http = "http://127.0.0.1:80/health"
      interval = "10s"
      timeout = "5s"
    }
  ]
  token = "root"
}
EOT

systemctl daemon-reload
systemctl enable redis --now
systemctl enable mysql --now
systemctl enable middleware --now
systemctl enable frontend --now
systemctl enable haproxy --now

# Lay down consul certificates
echo "${consul_agent_ca}" > /etc/consul.d/consul-agent-ca.pem
echo "${consul_server_key}" > /etc/consul.d/dc1-server-consul-0-key.pem
echo "${consul_server_cert}" > /etc/consul.d/dc1-server-consul-0.pem

# Configure Consul and start it up
cat <<EOT > /etc/consul.d/consul.hcl
datacenter = "${datacenter}"
data_dir = "/opt/consul"
log_level = "INFO"
server = false
advertise_addr = "$${INSTANCE_IP}"
bind_addr = "{{ GetDefaultInterfaces | exclude \"type\" \"IPv6\" | attr \"address\" }}"
client_addr = "0.0.0.0"
ui = true

telemetry {
  prometheus_retention_time = "10m"
  disable_hostname = true
}

acl {
  enabled = true
  default_policy = "deny"
  enable_token_persistence = true
  tokens {
    initial_management = "${consul_token}"
    agent = "${consul_token}"
  }
}

auto_encrypt {
  tls = true
}

tls {
  defaults {
    ca_file = "/etc/consul.d/consul-agent-ca.pem"

    verify_incoming = true
    verify_outgoing = true
  }
  internal_rpc {
    verify_server_hostname = true
  }
}

ports = {
  grpc = 8502
  https = 8501
  grpc_tls = 8503
}

retry_join = ["provider=aws tag_key=role tag_value=consul-server"]
EOT

systemctl daemon-reload
systemctl enable consul --now


sleep 15 # Give consul a moment to start up

## Configure Consul DNS 
mkdir -p /etc/systemd/resolved.conf.d/
cat <<EOT > /etc/systemd/resolved.conf.d/consul.conf
[Resolve]
DNS=127.0.0.1:8600
DNSSEC=false
Domains=~consul
EOT

systemctl restart systemd-resolved
export CONSUL_HTTP_TOKEN=${consul_token}
echo CONSUL_HTTP_TOKEN=${consul_token} >> /etc/environment

consul kv put service/haproxy/maxconn 20
consul kv put service/haproxy/mode "http"
consul kv put service/haproxy/timeouts 5


mkdir /etc/consul-template.d
cat <<EOT > /etc/consul-template.d/consul-template.conf
consul {
  address = "127.0.0.1:8500"
}

log_level = "debug"

template {
  source = "/etc/consul-template.d/haproxy.cfg.tmpl"
  destination = "/etc/haproxy/haproxy.cfg"
  exec {
    command = ["systemctl", "restart", "haproxy"]
  }
}
EOT

cat <<EOT > /etc/consul-template.d/haproxy.cfg.tmpl
global
    daemon
    maxconn {{key "service/haproxy/maxconn"}}

defaults
    mode {{key "service/haproxy/mode"}}
    timeout client {{key "service/haproxy/client_timeout"}}
    timeout server {{key "service/haproxy/server_timeout"}}
    timeout connect {{key "service/haproxy/connect_timeout"}}

listen http-in
    mode tcp
    option httpchk
    http-check send meth GET  uri /health
    balance roundrobin
    bind *:80{{range service "frontend"}}
    server {{.Node}} {{.Address}}:{{.Port}} check{{end}}

frontend stats
    mode http
    bind *:9000
    stats enable
    stats uri /stats
    stats refresh 10s 
EOT

cat <<EOT > /etc/systemd/system/consul-template.service
[Unit]
Description=consul-template
Requires=network-online.target
After=network-online.target consul.service vault.service

[Service]
EnvironmentFile=-/etc/sysconfig/consul-template
Restart=on-failure
ExecStart=/usr/bin/consul-template -config=/etc/consul-template.d/consul-template.conf

[Install]
WantedBy=multi-user.target
EOT

systemctl daemon-reload
systemctl enable consul-template --now